import os
import AdaBuilder
import ReportBuilder
import AsnBuilder
import TestCaseBuilder
import XmlBuilder
import SummaryBuilder
import subprocess

from run_tests import test_main
from glob import glob
from commons import *
from templates import templates

def _get_output_name(test_case):
    return os.path.join('build',
                        os.path.basename(os.path.normpath(test_case)))

def _get_asn_bin(search_root, build_script):
    binary = find_files_recursive(search_root, 'Asn1f2\.exe$')
    if not binary and build_script:
        return_code = subprocess.call(build_script, cwd=os.path.dirname(build_script))
        if return_code != 0:
            raise ChildProcessError("Failed to build asn1f2")
        return _get_asn_bin(search_root, '')
    return binary[0]

def _basenames(test_file):
    return (os.path.splitext(os.path.basename(str(test_file[0])))[0],
            env['VARIABLES'][_test_name(test_file)]['MODULES'][0].lower())

def _test_name(test_file):
    return os.path.basename(os.path.dirname(str(test_file[0])))

env = Environment()
env['BUILDERS']['Ada'] = AdaBuilder.builder()
env['BUILDERS']['Report'] = ReportBuilder.builder()
env['BUILDERS']['Asn'] = AsnBuilder.builder()
env['BUILDERS']['TestCase'] = TestCaseBuilder.builder()
env['BUILDERS']['Xml'] = XmlBuilder.builder()
env['BUILDERS']['Summary'] = SummaryBuilder.builder()
env['SCRIPT_DIR'] = Dir('#').abspath
env['ASN_ROOT'] = os.path.dirname(os.path.dirname(env['SCRIPT_DIR']))
env['BIN_DIR'] = os.path.join(env['ASN_ROOT'], 'Asn1f2', 'bin')
env['ASN_BIN'] = _get_asn_bin(env['BIN_DIR'], os.path.join(env['ASN_ROOT'], 'circleci-build.sh'))
env['LANGUAGES'] = ['c', 'Ada']
env['VARIABLES'] = {}
env.Append(CPPPATH=[])

test_cases = glob('test-cases/*/')
reports = []
for test_case in test_cases:
    env['BUILD_DIR'] = _get_output_name(test_case)
    env['TEST_CASE'] = test_case
    Export('env')

    VariantDir(env['BUILD_DIR'], 'sources')
    sources = without_top_directory(Glob('sources/*'))
    test_file = glob_files_recursive(test_case, '.*(asn1|acn)$')
    #TODO: More than expected files
    xml = os.path.join(test_case, '.tmp.xml')

    test_case_output = env.TestCase(target=[xml], source=[test_file, env['ASN_BIN']])
    asn_output = env.Asn([],
                         [env['ASN_BIN']] + test_file,
                         BASENAMES = _basenames(test_file),
                         DIRNAME = env['BUILD_DIR'])
    test_case_report = [SConscript(os.path.join(env['BUILD_DIR'], 'SConscript'),
                                  exports={
                                    'PROXY' : without_top_directory(to_strings(proxy), n=2),
                                    'ASN' : without_top_directory(to_strings(asn_output), n=2),
                                    'SOURCES' : sources})[0]
                        for proxy in grouper(len(templates), test_case_output)]
    reports += [test_case_report]
    Clean(test_case_report, env['BUILD_DIR'])

Default(env.Summary(["Non existing file"], reports))

