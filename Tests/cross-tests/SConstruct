import os
import AdaBuilder
import ReportBuilder
import AsnBuilder
import TestCaseBuilder
import XmlBuilder
import subprocess

from run_tests import test_main
from glob import glob
from commons import find_files_recursive, glob_files_recursive, grouper

def _get_output_name(test_case):
    return os.path.join('build',
                        os.path.basename(os.path.normpath(test_case)))

def _get_asn_bin(search_root, build_script):
    binary = find_files_recursive(search_root, 'Asn1f2\.exe$')
    if not binary and build_script:
        return_code = subprocess.call(build_script, cwd=os.path.dirname(build_script))
        if return_code != 0:
            raise ChildProcessError("Failed to build asn1f2")
        return _get_asn_bin(search_root, '')
    return binary[0]

def _get_language_files(test_case, language):
    return [str(file_) for file_ in test_case if language + '_out' in str(file_)]

env = Environment()
env['BUILDERS']['Ada'] = AdaBuilder.builder()
env['BUILDERS']['Report'] = ReportBuilder.builder()
env['BUILDERS']['Asn'] = AsnBuilder.builder()
env['BUILDERS']['TestCase'] = TestCaseBuilder.builder()
env['BUILDERS']['Xml'] = XmlBuilder.builder()
env['SCRIPT_DIR'] = Dir('#').abspath
env['ASN_ROOT'] = os.path.dirname(os.path.dirname(env['SCRIPT_DIR']))
env['BIN_DIR'] = os.path.join(env['ASN_ROOT'], 'Asn1f2', 'bin')
env['ASN_BIN'] = _get_asn_bin(env['BIN_DIR'], os.path.join(env['ASN_ROOT'], 'circleci-build.sh'))
env['LANGUAGES'] = ['c', 'Ada']
env['COMMONS_SRC'] = ['file_utility.c']
env['COMMONS_OBJ'] = ['file_utility.o']
env['ADA_HELPERS_SRC'] = ['ada_helpers.c']
env['ADA_HELPERS_OBJ'] = [os.path.splitext(source)[0] + ".o" for source in env['ADA_HELPERS_SRC']]
env['ADA_DEPENDENCIES'] = ['utility.adb', 'utility.ads'] + env['ADA_HELPERS_OBJ'] + env['COMMONS_OBJ']
env['VARIABLES'] = {}
env.Append(CPPPATH=['c_out','Ada_out'])

test_cases = glob('test-cases/*/')
for test_case in test_cases:
    env['BUILD_DIR'] = _get_output_name(test_case)
    env['TEST_CASE'] = test_case
    Export('env')

    VariantDir(env['BUILD_DIR'], 'sources')
    test_file = Glob(os.path.join(test_case, '*'))
    #TODO: More than expected files
    #xml = os.path.join(env['BUILD_DIR'], os.path.basename(os.path.normpath(test_case)) + '.xml')
    xml = os.path.join(test_case, '.tmp.xml')
    
    output = env.TestCase(target=[xml], source=[test_file, env['ASN_BIN']])
    for proxy in grouper(5, output[1:]):
        SConscript(os.path.join(env['BUILD_DIR'], 'SConscript'),
                   exports={'PROXY' : proxy, 'TEST_FILE' : test_file})
