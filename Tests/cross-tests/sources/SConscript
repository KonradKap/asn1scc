from commons import *
from glob import glob

import os

import TestCaseBuilder
import AdaBuilder

Import('env')
Import('PROXY')
Import('TEST_FILE')

def _proxy_name(proxy):
    return os.path.basename(os.path.dirname(proxy[0].path))

def _bin_name(language, proxy):
    return _proxy_name(proxy) + "_{}_bin".format(language)

def _report_name(proxy):
    return _proxy_name(proxy) + "_report"

def _module_name(env):
    return env['VARIABLES'][os.path.basename(Dir('.').path)]['MODULES'][0].lower()

def _build_ada_o(target, source, include_dir, output_dir):
    o_file = env.Command(target, source, 'gnatmake -c $SOURCE {} -D "{}"'
        .format(' '.join(['-I"' + dir_ + '"' for dir_ in include_dir]),
                output_dir))[0]
    o_file = without_top_directory(o_file.path, n=2)
    side_effect_files = AdaBuilder.get_side_effect_files(source, '.')
    side_effect_files.remove(o_file)
    SideEffect(side_effect_files, o_file)
    return [o_file]

def _ada_files(basename, directory):
    return [os.path.join(directory, basename + '.adb'),
            os.path.join(directory, basename + '.ads')]

proxy_name = _proxy_name(PROXY)
obj = env.Object([source for source in Glob('*.c') + Glob(os.path.join(proxy_name, '*.c'))])

ada_accessors = _build_ada_o(os.path.join(proxy_name, '{}_ada_accessors.o'.format(proxy_name)),
                             _ada_files('{}_ada_accessors'.format(proxy_name), proxy_name)
                             + _ada_files('adaasn1rtl', '.')
                             + _ada_files(_module_name(env), '.'),
                            include_dir=[Dir('.').path], output_dir=Dir(proxy_name).path)

c_bin = env.Program([_bin_name('c', PROXY)], obj + ada_accessors)

ada_main = File(os.path.join(proxy_name, TestCaseBuilder.ada_main_filename(proxy_name))).path
ada_bin = env.Ada([_bin_name('ada', PROXY)],
                  [source for source in glob_files_recursive('.', '.*\.(adb|ads)')
                   if not source.endswith(('accessors.adb', 'accessors.ads'))]
                    + env.Object(Glob(os.path.join(proxy_name, '{}_ada_helpers.c'.format(proxy_name))))
                    + env.Object('file_utility.c')
                    + ada_accessors,
                  ADA_MAIN = ada_main,
                  INCLUDE=[Dir('.').path])[0]

report = env.Report([_report_name(PROXY)], [c_bin, ada_bin])

Return('report')
