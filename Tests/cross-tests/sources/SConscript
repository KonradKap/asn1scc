from commons import *
from glob import glob

import os

import TestCaseBuilder
import AdaBuilder

Import('env')
Import('ASN')
Import('PROXY')
Import('SOURCES')

def _proxy_name(proxy):
    return os.path.basename(os.path.dirname(str(proxy[0])))

def _bin_name(language, proxy):
    return _proxy_name(proxy) + "_{}_bin".format(language)

def _report_name(proxy):
    return _proxy_name(proxy) + "_report"

def _build_ada_o(target, source, include_dir, output_dir):
    o_file = str(env.Command(target, source, 'gnatmake -c $SOURCE {} -D "{}"'
        .format(' '.join(['-I"' + dir_ + '"' for dir_ in include_dir]),
                output_dir))[0])
    side_effect_files = AdaBuilder.get_side_effect_files(source, '.')
    side_effect_files.remove(o_file)
    return [o_file]

def _ada_files(basename, directory):
    return [os.path.join(directory, basename + '.adb'),
            os.path.join(directory, basename + '.ads')]

proxy_name = _proxy_name(PROXY)
all_sources = to_strings(ASN + PROXY + SOURCES)

obj = env.Object(get_files_with_suffix(all_sources, 'c'))
ada_accessors = _build_ada_o(os.path.join(proxy_name, '{}_ada_accessors.o'.format(proxy_name)),
                             _ada_files('{}_ada_accessors'.format(proxy_name), proxy_name)
                             + get_files_with_suffix(ASN, 'adb|ads'),
                            include_dir=[Dir('.').path], output_dir=Dir(proxy_name).path)
c_bin = env.Program([_bin_name('c', PROXY)], obj + ada_accessors)

ada_main = File(os.path.join(proxy_name, TestCaseBuilder.ada_main_filename(proxy_name))).path
ada_bin = env.Ada([_bin_name('ada', PROXY)],
                  get_files_with_suffix(all_sources, 'adb|ads')
                  + env.Object(Glob(os.path.join(proxy_name, '{}_ada_helpers.c'.format(proxy_name))))
                  + env.Object('file_utility.c') + [File('file_utility.h')]
                  + ada_accessors,
                  ADA_MAIN = ada_main,
                  INCLUDE=[Dir('.').path, Dir(proxy_name).path])[0]

report = env.Report([_report_name(PROXY)], [c_bin, ada_bin])

Return('report')
