templates = [
(''
R'#include <stdbool.h>\n'

R'static const char *filename = "{buffer_}";\n'
R'bool proxy_decode();\n'
R'void proxy_encode();\n'
''),
(''
R'#include "c_proxy.h"\n'

R'#include <stdbool.h>\n'
R'#include <stdio.h>\n'
R'#include "file_utility.h"\n'
R'#include "{asn_header}"\n'

R'bool proxy_decode() {{\n'
  R'unsigned char buffer[{type_}_REQUIRED_BYTES_FOR_ACN_ENCODING];\n'
  R'BitStream stream;\n'
  R'BitStream_Init(&stream, buffer, {type_}_REQUIRED_BYTES_FOR_ACN_ENCODING);\n'
  R'read_from_file(filename, (char *) buffer, {type_}_REQUIRED_BYTES_FOR_ACN_ENCODING);\n'
  R'int error_code=0;\n'
  R'{type_} to_decode;\n'

  R'flag result={type_}_ACN_Decode(&to_decode, &stream, &error_code);\n'
  R'if(result==false){{\n'
    R'fprintf(stderr,"Result of {type_}_ACN_Encode evaluated to false\\\\n");\n'
    R'return false;\n'
  R'}}\n'
  R'if(error_code!=0){{\n'
    R'fprintf(stderr,"Error code was set: %%d\\\\n",error_code);\n'
    R'return false;\n'
  R'}}\n'
  R'printf("%%llu\\\\n",to_decode);\n'
  R'fflush(stdout);\n'
  R'return true;\n'
R'}}\n'

R'void proxy_encode(){{\n'
  R'unsigned char buffer[{type_}_REQUIRED_BYTES_FOR_ACN_ENCODING];\n'
  R'BitStream stream;\n'
  R'BitStream_Init(&stream,buffer,{type_}_REQUIRED_BYTES_FOR_ACN_ENCODING);\n'

  R'int error_code=0;\n'
  R'flag result={type_}_ACN_Encode(&{variable},&stream,&error_code,false);\n'

  R'if(result==false){{\n'
    R'fprintf(stderr,"Result of {type_}_ACN_Encode evaluated to false\\\\n");\n'
    R'return;\n'
  R'}}\n'

  R'if(error_code!=0){{\n'
    R'fprintf(stderr,"Error code was set: %%d\\\\n",error_code);\n'
    R'return;\n'
  R'}}\n'

  R'write_to_file(filename,(char *)buffer,{type_}_REQUIRED_BYTES_FOR_ACN_ENCODING);\n'

  R'printf("%%llu\\\\n",{variable});\n'
  R'fflush(stdout);\n'
R'}}'),
(''
R'with Ada.Text_IO;\n'
R'with Ada.Integer_Text_IO;\n'
R'with Ada.Command_Line;\n'
R'with {variable}_ada_proxy;\n'
R'with Ada.Long_Long_Integer_Text_IO;\n'
R'with Interfaces;\n'

R'procedure ada_main_{variable} is\n'

R'begin\n'
R'if(Ada.Command_Line.Argument_Count/=1)then\n'
  R'return;\n'
R'end if;\n'

R'if(Ada.Command_Line.Argument(1)="encode")then\n'
  R'{variable}_ada_proxy.proxy_encode;\n'
R'elsif(Ada.Command_Line.Argument(1)="decode")then\n'
  R'{variable}_ada_proxy.proxy_decode;\n'
R'else\n'
  R'Ada.Text_IO.Put_Line(Ada.Text_IO.Standard_Error,"Unrecognized option: "\n'
    R'& Ada.Command_Line.Argument(1));\n'
R'end if;\n'

R'end ada_main_{variable};\n'
''),
(''
R'with {module};\n'
R'with Interfaces;\n'
R'with Interfaces.C;\n'

R'package {variable}_ada_proxy is\n'

R'procedure proxy_encode;\n'
R'procedure proxy_decode;\n'
R'procedure save_to_file(buffer : in {module}.{type_}_ACN_bit_array);\n'
R'procedure read_from_file(buffer : in out {module}.{type_}_ACN_bit_array);\n'

R'function get(buffer : in {module}.{type_}_ACN_bit_array; index : in Interfaces.C.Int) return Interfaces.C.int;\n'
R'procedure set(buffer : in out {module}.{type_}_ACN_bit_array; index : in Interfaces.C.Int; value : in Interfaces.C.int);\n'
R'function write_memory(filename : in String; buffer : in {module}.{type_}_ACN_bit_array) return Interfaces.C.int;\n'
R'function read_memory(filename : in String; buffer : in out {module}.{type_}_ACN_bit_array) return Interfaces.C.int;\n'

R'pragma Export(C, get, "get");\n'
R'pragma Export(C, set, "set");\n'
R'pragma Import(C, write_memory, "write_memory");\n'
R'pragma Import(C, read_memory, "read_memory");\n'

R'private\n'
  R'filename : constant String := "{buffer_}";\n'

R'end {variable}_ada_proxy;\n'
''),
(''
R'with Ada.Text_IO;\n'
R'with Ada.Text_IO.Text_Streams;\n'
R'with Ada.Integer_Text_IO;\n'
R'with Ada.Long_Long_Integer_Text_IO;\n'
R'with Interfaces;\n'
R'with adaasn1rtl; use adaasn1rtl;\n'
R'with Interfaces.C; use Interfaces.C;\n'

R'package body {variable}_ada_proxy is\n'

R'procedure proxy_encode is\n'
  R'stream : {module}.{type_}_ACN_Stream;\n'
R'begin\n'
  R'{module}.{type_}_ACN_Encode({module}.{variable}, stream);\n'
  R'save_to_file(stream.Data);\n'
  R'Ada.Long_Long_Integer_Text_IO.Put(Long_Long_Integer({module}.{variable}));\n'
R'end proxy_encode;\n'

R'procedure proxy_decode is\n'
  R'stream : {module}.{type_}_ACN_Stream;\n'
  R'value : {module}.{type_}:= 5;\n'
  R'result : adaasn1rtl.ASN1_RESULT;\n'
R'begin\n'
R'read_from_file(stream.Data);\n'
  R'stream.DataLen := {module}.{type_}_REQUIRED_BITS_FOR_ACN_ENCODING;\n'
  R'{module}.{type_}_ACN_Decode(value, stream, result);\n'
  R'if (result.Success /= True) then\n'
    R'Ada.Text_IO.Put(Ada.Text_IO.Standard_Error, "Error was set. Error code: ");\n'
    R'Ada.Integer_Text_IO.Put(Ada.Text_IO.Standard_Error, result.ErrorCode);\n'
    R'Ada.Text_IO.New_Line(Ada.Text_IO.Standard_Error);\n'
  R'else\n'
    R'Ada.Long_Long_Integer_Text_IO.Put(Long_Long_Integer(value));\n'
  R'end if;\n'
R'end proxy_decode;\n'

R'procedure save_to_file(buffer : in {module}.{type_}_ACN_bit_array) is\n'
  R'result : Interfaces.C.int;\n'
  R'c_name : String(1..filename\'length + 1);\n'
R'begin\n'
  R'c_name(1..filename\'length) := filename;\n'
  R'c_name(filename\'length + 1) := Character\'Val(0);\n'
  R'result := write_memory(c_name, buffer);\n'
  R'if (result /= 0) then\n'
    R'Ada.Text_IO.Put_Line(Ada.Text_IO.Standard_Error, "Writing to file failed");\n'
  R'end if;\n'
R'end save_to_file;\n'

R'procedure read_from_file(buffer : in out {module}.{type_}_ACN_bit_array) is\n'
  R'result : Interfaces.C.int;\n'
  R'c_name : String(1..filename\'length + 1);\n'
R'begin\n'
  R'c_name(1..filename\'length) := filename;\n'
  R'c_name(filename\'length + 1) := Character\'Val(0);\n'
  R'result := read_memory(c_name, buffer);\n'
  R'if (result /= 0) then\n'
    R'Ada.Text_IO.Put_Line(Ada.Text_IO.Standard_Error, "Reading from file failed");\n'
  R'end if;\n'
R'end read_from_file;\n'

R'function get(buffer : in {module}.{type_}_ACN_bit_array; index : in Interfaces.C.Int) return Interfaces.C.int is\n'
R'begin\n'
  R'if (buffer(Integer(index+1)) = 1) then\n'
    R'return Interfaces.C.int(1);\n'
  R'else\n'
    R'return Interfaces.C.int(0);\n'
  R'end if;\n'
R'end get;\n'

R'procedure set(buffer : in out {module}.{type_}_ACN_bit_array; index : in Interfaces.C.Int; value : in Interfaces.C.int) is\n'
R'begin\n'
  R'buffer(Integer(index+1)) := adaasn1rtl.BIT(value);\n'
R'end set;\n'

R'end {variable}_ada_proxy;\n'
''),
(''
R'#include <stdio.h>\n'
R'#include <string.h>\n'

R'#include "{test_case}.h"\n'

R'extern int get(char buffer[], int index);\n'
R'extern void set(char buffer[], int index, int value);\n'

R'int read_memory(const char *filename, char buffer[]) {{\n'
  R'unsigned char real_buffer[{type_}_REQUIRED_BYTES_FOR_ACN_ENCODING];\n'
  R'memset(real_buffer, 0, {type_}_REQUIRED_BYTES_FOR_ACN_ENCODING);\n'

  R'read_from_file(filename, (char *) real_buffer, {type_}_REQUIRED_BYTES_FOR_ACN_ENCODING);\n'

  R'for (int i = 0; i < {type_}_REQUIRED_BYTES_FOR_ACN_ENCODING; ++i) {{\n'
    R'for (int j = 0; j < 8; ++j) {{\n'
      R'int to_write = (real_buffer[i] & (1 << (7-j))) != 0;\n'
      R'set(buffer, j+i*8, to_write);\n'
    R'}}\n'
  R'}}\n'
  R'return 0;\n'
R'}}\n'

R'int write_memory(const char *filename, char buffer[]) {{\n'
  R'unsigned char real_buffer[MyInt_REQUIRED_BYTES_FOR_ACN_ENCODING];\n'
  R'memset(real_buffer, 0, MyInt_REQUIRED_BYTES_FOR_ACN_ENCODING);\n'
  R'for (int i = 0; i < MyInt_REQUIRED_BYTES_FOR_ACN_ENCODING; ++i) {{\n'
    R'for (int j = 0; j < 8; ++j) {{\n'
      R'unsigned char bit = get(buffer, j+i*8);\n'
      R'real_buffer[i] |= (bit << (7-j));\n'
    R'}}\n'
  R'}}\n'

  R'write_to_file(filename, (char *) real_buffer, MyInt_REQUIRED_BYTES_FOR_ACN_ENCODING);\n'
  R'return 0;\n'
R'}}\n'
'')
]
